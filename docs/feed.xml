<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-11-12T19:24:32-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ajay’s Journal</title><subtitle></subtitle><author><name>Ajay Ramesh</name><email>ajaysjournal@icloud.com</email></author><entry><title type="html">Good Links</title><link href="http://localhost:4000/blog/bookmarks/2021-12-05-good-links/" rel="alternate" type="text/html" title="Good Links" /><published>2021-12-05T00:00:00-05:00</published><updated>2024-11-12T18:49:23-05:00</updated><id>http://localhost:4000/blog/bookmarks/good-links</id><content type="html" xml:base="http://localhost:4000/blog/bookmarks/2021-12-05-good-links/"><![CDATA[<p>Coming Soon…</p>]]></content><author><name>Ajay Ramesh</name><email>ajaysjournal@icloud.com</email></author><category term="bookmarks" /><category term="cs" /><category term="bookmarks" /><summary type="html"><![CDATA[Good Links on CS]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/bookmark.jpg" /><media:content medium="image" url="http://localhost:4000/assets/bookmark.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to plot AUC - ROC Curve using Python?</title><link href="http://localhost:4000/blog/cs/2021-11-26-ROC/" rel="alternate" type="text/html" title="How to plot AUC - ROC Curve using Python?" /><published>2021-11-26T00:00:00-05:00</published><updated>2024-11-12T18:49:23-05:00</updated><id>http://localhost:4000/blog/cs/ROC</id><content type="html" xml:base="http://localhost:4000/blog/cs/2021-11-26-ROC/"><![CDATA[<p>In this example, we are using Classification problem, where you need to classify  on breast cancer based some input data.</p>

<h3 id="working-code">Working code</h3>
<p>Try this in Google Collaborator Lab<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">1</a></sup>, or any Python environment to get started.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn</span> <span class="kn">import</span> <span class="n">svm</span><span class="p">,</span> <span class="n">datasets</span>
<span class="kn">from</span> <span class="n">sklearn</span> <span class="kn">import</span> <span class="n">metrics</span>
<span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="n">sklearn.datasets</span> <span class="kn">import</span> <span class="n">load_breast_cancer</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># Load Data
</span><span class="n">breast_cancer</span> <span class="o">=</span> <span class="nf">load_breast_cancer</span><span class="p">()</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">breast_cancer</span><span class="p">.</span><span class="n">data</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">breast_cancer</span><span class="p">.</span><span class="n">target</span>

<span class="c1"># Split the Dataset to Train and Test
</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">test_size</span><span class="o">=</span><span class="mf">0.33</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">44</span><span class="p">)</span>

<span class="c1"># Train the Model 
</span><span class="n">clf</span> <span class="o">=</span> <span class="nc">LogisticRegression</span><span class="p">(</span><span class="n">penalty</span><span class="o">=</span><span class="sh">'</span><span class="s">l2</span><span class="sh">'</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">y_pred</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>

<span class="c1"># Test the model using AOC-ROC Graph
</span><span class="n">y_pred_proba</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="nf">predict_proba</span><span class="p">(</span><span class="n">X_test</span><span class="p">)[::,</span><span class="mi">1</span><span class="p">]</span>
<span class="n">fpr</span><span class="p">,</span> <span class="n">tpr</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">metrics</span><span class="p">.</span><span class="nf">roc_curve</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span>  <span class="n">y_pred_proba</span><span class="p">)</span>
<span class="n">auc</span> <span class="o">=</span> <span class="n">metrics</span><span class="p">.</span><span class="nf">roc_auc_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred_proba</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">fpr</span><span class="p">,</span><span class="n">tpr</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">data 1, auc=</span><span class="sh">"</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">auc</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="output---auroc-graph">Output - AUROC Graph</h3>
<p><img src="/assets/blog/2021/11-28/DraggedImage.png" alt="" /></p>
<h3 id="tpr---true-positive-rate">TPR - True Positive Rate</h3>

<p>True positive, means model predicted Breast Cancer and that is True, for entire dataset what is the TPR ?  <code class="language-plaintext highlighter-rouge">TPR = TP/TP+FN</code> - it is also known as Recall, if TPR is 1 - for that particular point of time, there were no mistakes done..</p>

<blockquote>
  <p>TPR will be one, if no mistakes made by algorithm. 
TPR is also knows as Recall/Sensitivity of Model.</p>
</blockquote>

<h3 id="fpr---false-positive-rate">FPR - False Positive Rate</h3>
<p>Using FPR, we can tell about the accuracy of the model performance. If it is not good, then FPR will almost equal to 1, meaning it says Breast Cancer but in actual case there is no Breast Cancer. Another example, you are not pregnant in actual case, but model says you pregnant.</p>

<p>If it is good model, then FPR should equate to 0, by making <code class="language-plaintext highlighter-rouge">Specificity =1</code>, that means, you have developed model which will correctly classifies, great job 🎉</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FPR</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">Specificity</span>
</code></pre></div></div>

<h3 id="combining-the-tpr-and-fpr--auroc">Combining the TPR and FPR = AUROC</h3>
<p>In order to find behavior of model over test data, draw plot and see the Area under Curve value, if it near to 1 means model is fitting right, looks like you got the awesome model. In above code, I am getting Areas as <code class="language-plaintext highlighter-rouge">0.99..</code>, which is a good model using Logistic Regression.</p>

<h3 id="further-reading">Further Reading</h3>
<ol>
  <li><a href="https://towardsdatascience.com/understanding-confusion-matrix-a9ad42dcfd62">Confusion Matrix</a></li>
  <li><a href="https://towardsdatascience.com/understanding-auc-roc-curve-68b2303cc9c5">Understanding Auc curve</a></li>
  <li><a href="https://notesbyair.github.io/blog/cs/2021-11-21-simple-basic-metrics-to-measure-the-AI-model-performance/">Simple basic metrics to measure the AI model performance</a></li>
  <li><a href="https://colab.research.google.com/drive/1tRR6VatCVmpWZaHFJ47Xtyz3GzUZ1wu2?usp=sharing">Code playground to test the theory…</a></li>
  <li><a href="https://www.youtube.com/watch?v=4jRBRDbJemM">Awesome video explanation here</a></li>
</ol>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:2" role="doc-endnote">
      <p>https://colab.research.google.com/drive/1tRR6VatCVmpWZaHFJ47Xtyz3GzUZ1wu2?usp=sharing <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Ajay Ramesh</name><email>ajaysjournal@icloud.com</email></author><category term="cs" /><summary type="html"><![CDATA[Today let me explain a simple ROC graph and its basic understanding with an example. I am using simple dataset, so that you can play around to test the theory behind it. Let's apply to classify breast cancer data.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/blog/2021/11-28/DraggedImage.png" /><media:content medium="image" url="http://localhost:4000/assets/blog/2021/11-28/DraggedImage.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Simple basic metrics to measure the AI model performance</title><link href="http://localhost:4000/blog/cs/2021-11-21-simple-basic-metrics-to-measure-the-AI-model-performance/" rel="alternate" type="text/html" title="Simple basic metrics to measure the AI model performance" /><published>2021-11-21T00:00:00-05:00</published><updated>2024-11-12T18:49:23-05:00</updated><id>http://localhost:4000/blog/cs/simple-basic-metrics-to-measure-the-AI-model-performance</id><content type="html" xml:base="http://localhost:4000/blog/cs/2021-11-21-simple-basic-metrics-to-measure-the-AI-model-performance/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#terms---tp-tn-fp-fn" id="markdown-toc-terms---tp-tn-fp-fn">Terms - TP, TN, FP, FN</a>    <ol>
      <li><a href="#true-positive-and-true-negative" id="markdown-toc-true-positive-and-true-negative">True Positive and True Negative</a></li>
      <li><a href="#false-positive-and-false-negative" id="markdown-toc-false-positive-and-false-negative">False Positive and False Negative</a></li>
    </ol>
  </li>
  <li><a href="#metrics" id="markdown-toc-metrics">Metrics</a>    <ol>
      <li><a href="#accuracy" id="markdown-toc-accuracy">Accuracy</a></li>
      <li><a href="#recall" id="markdown-toc-recall">Recall</a></li>
      <li><a href="#precision" id="markdown-toc-precision">Precision</a></li>
    </ol>
  </li>
  <li><a href="#references" id="markdown-toc-references">References</a></li>
</ol>

<p>Today, I am going to explain basic metrics used to measure the AI Model. I wanted to keep it very short blog on this topic, after understanding the metrics hard way<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. Since, I am writing this during COVID time, consider an example, where I build an AI Model which classifies a person report as  COVID or not.</p>

<h2 id="terms---tp-tn-fp-fn">Terms - TP, TN, FP, FN</h2>

<h3 id="true-positive-and-true-negative">True Positive and True Negative</h3>
<p><img src="/assets/blog/2021/11-21/DraggedImage.png" alt="" /></p>

<h3 id="false-positive-and-false-negative">False Positive and False Negative</h3>
<p>In order to avoid confusion, read from right-left, for example - <code class="language-plaintext highlighter-rouge">FALSE-POSITIVE</code>, meaning model predicted the output as positive but it is not right/false. 
<img src="/assets/blog/2021/11-21/DraggedImage-1.png" alt="" /></p>

<h2 id="metrics">Metrics</h2>
<h3 id="accuracy">Accuracy</h3>
<p>If it is 100% accurate model, the model predicts actual as actual, something like below. In practical world, if the model is 100% accurate means, it is overfitting the model to data, and it needs to be revised. 
<img src="/assets/blog/2021/11-21/DraggedImage-2.png" alt="" /></p>

<h3 id="recall">Recall</h3>
<p class="note">What proportion of actual positives was identified correctly ? <sup id="fnref:1:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>
<p>Below table got 50% recall, meaning 50% of the time if Model predicts COVID, then 50% of the time it is actual. 
<img src="/assets/blog/2021/11-21/DraggedImage-3.png" alt="" /></p>

<h3 id="precision">Precision</h3>
<p class="note">What proportion of positive identifications was actually correct ? <sup id="fnref:1:2" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>
<p>In below example, precision is 0%, meaning predicted positive output is not right, the Model says - “person doesn’t have covid, but in reality person got covid” 
<img src="/assets/blog/2021/11-21/DraggedImage-4.png" alt="" /></p>

<h2 id="references">References</h2>
<ul>
  <li><a href="https://www.dropbox.com/s/w78g011p8dtibvo/11-21-21-Metrics-Spreadsheet.xlsx?dl=0">Download the excel file from this link</a></li>
</ul>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://developers.google.com/machine-learning/crash-course/classification/check-your-understanding-accuracy-precision-recall?hl=en">https://developers.google.com/machine-learning/crash-course/classification/check-your-understanding-accuracy-precision-recall?hl=en</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:1:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a> <a href="#fnref:1:2" class="reversefootnote" role="doc-backlink">&#8617;<sup>3</sup></a></p>
    </li>
  </ol>
</div>]]></content><author><name>Ajay Ramesh</name><email>ajaysjournal@icloud.com</email></author><category term="cs" /><summary type="html"><![CDATA[What is Accuracy, Recall, Precision, TP, FP, TN, TP ?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/blog/2021/11-21/title.png" /><media:content medium="image" url="http://localhost:4000/assets/blog/2021/11-21/title.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What is present inside a Video ?</title><link href="http://localhost:4000/blog/cs/2021-11-14-understanding-video-content-type-basics/" rel="alternate" type="text/html" title="What is present inside a Video ?" /><published>2021-11-14T00:00:00-05:00</published><updated>2024-11-12T18:49:23-05:00</updated><id>http://localhost:4000/blog/cs/understanding-video-content-type-basics</id><content type="html" xml:base="http://localhost:4000/blog/cs/2021-11-14-understanding-video-content-type-basics/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#lab" id="markdown-toc-lab">Lab</a>    <ol>
      <li><a href="#container-information" id="markdown-toc-container-information">Container information</a></li>
      <li><a href="#codec-information" id="markdown-toc-codec-information">Codec information</a></li>
    </ol>
  </li>
  <li><a href="#concepts" id="markdown-toc-concepts">Concepts</a>    <ol>
      <li><a href="#what-is-codec-and-how-it-works-" id="markdown-toc-what-is-codec-and-how-it-works-">What is codec and how it works ?</a></li>
    </ol>
  </li>
  <li><a href="#further-reading" id="markdown-toc-further-reading">Further reading</a></li>
</ol>

<p>Video contains two main parts, <strong>Codec</strong> and <strong>Container.</strong></p>

<p class="note"><strong>Container:</strong> - we can find out easily by looking at video file extension.
<strong>Codec:</strong> - Software to Compresses or De-Compresses the Video.
<img src="/assets/blog/2021/11-14/image/image-2.png" alt="image.png" /></p>

<h2 id="lab">Lab</h2>

<ul>
  <li>Use any video or download a sample video file from this location - <a href="https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4">MP4-Sample video</a>.</li>
  <li>Download the <a href="https://mediaarea.net/en/MediaInfo">MediaInfo Software</a></li>
</ul>

<h3 id="container-information">Container information</h3>

<ul>
  <li>If you see below, it contains three parts.</li>
  <li><img src="/assets/blog/2021/11-14/image/image.png" alt="image-1.png" /></li>
</ul>

<h3 id="codec-information">Codec information</h3>

<ul>
  <li>How video is compressed? Here, this sample video is using H264 codec to compress the video.</li>
  <li>In below, you see Codec Information about video file using Media Info.</li>
  <li><img src="/assets/blog/2021/11-14/image/image-1.png" alt="image-2.png" /></li>
</ul>

<h2 id="concepts">Concepts</h2>

<h3 id="what-is-codec-and-how-it-works-">What is codec and how it works ?</h3>

<p>Codec is the reason we can play, store or stream the video, there are tons of codecs available today.</p>

<ul>
  <li>Video is a series of images.
    <ul>
      <li><strong>Main Idea:</strong> Most experts have a tough time agreeing on an exact number, but the conclusion is that most humans can see at a rate of 30 to 60 frames per second.</li>
      <li>Video player plays these images one by one based on time.
        <ul>
          <li>So, we can optimize on how we are going to save the Video, right ? We don’t need to save 30-60 images per second.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>How to save these images as video file ? What Algorithm works ?
    <ul>
      <li>Humans invented the Codecs, which compresses/de-compresses the video file using many techniques in computer vision.</li>
      <li>Simple example of one technique to compress series of images with <a href="https://youtu.be/PmoEsPWEdOA?t=253"> visualization video is here  </a></li>
    </ul>
  </li>
</ul>

<h2 id="further-reading">Further reading</h2>

<ol>
  <li><a href="https://www.vcodex.com/an-overview-of-h264-advanced-video-coding/">H264 Overview</a></li>
  <li><a href="https://www.salientsys.com/assets/uploads/docs/Understanding_H_264.pdf">Understanding H264</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Discrete_cosine_transform">Discrete cosine transform</a></li>
  <li><a href="https://caseguard.com/articles/how-many-frames-per-second-can-the-human-eye-see/#:~:text=Most%20experts%20have%20a%20tough,than%2060%20frames%20per%20second.">How many frames per second</a></li>
</ol>

<p>Let me know for comments.</p>]]></content><author><name>Ajay Ramesh</name><email>ajaysjournal@icloud.com</email></author><category term="cs" /><summary type="html"><![CDATA[Let's revisit our understanding on Video. We have many Video format for diverse applications.  Understanding a video format helps in applying right way. Let's check our understanding here.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/blog/2021/11-14/image/wall.jpg" /><media:content medium="image" url="http://localhost:4000/assets/blog/2021/11-14/image/wall.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to map a Java Bean using mapstruct library ?</title><link href="http://localhost:4000/blog/cs/2021-11-07-MapStruct-Tutorial/" rel="alternate" type="text/html" title="How to map a Java Bean using mapstruct library ?" /><published>2021-11-07T00:00:00-04:00</published><updated>2024-11-12T18:49:23-05:00</updated><id>http://localhost:4000/blog/cs/MapStruct-Tutorial</id><content type="html" xml:base="http://localhost:4000/blog/cs/2021-11-07-MapStruct-Tutorial/"><![CDATA[<ol id="markdown-toc">
  <li><a href="#why-mapping-" id="markdown-toc-why-mapping-">Why mapping ?</a></li>
  <li><a href="#example-project-setup" id="markdown-toc-example-project-setup">Example Project Setup</a></li>
  <li><a href="#how-to-map-using-mapstruct-annotation-" id="markdown-toc-how-to-map-using-mapstruct-annotation-">How to map using mapstruct annotation ?</a></li>
  <li><a href="#testing" id="markdown-toc-testing">Testing</a></li>
  <li><a href="#how-it-works-" id="markdown-toc-how-it-works-">How it works ?</a></li>
  <li><a href="#references" id="markdown-toc-references">References</a></li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
</ol>

<p>This blog, I am going to show a simple example for the understanding on Java Bean Mapping.</p>

<h2 id="why-mapping-">Why mapping ?</h2>
<ul>
  <li>Convert Java Bean/POJO to Another Bean/POJO with different names.</li>
  <li>Create Report Json with additional calculations.</li>
  <li>For using <a href="https://www.baeldung.com/java-dto-pattern">DTO Design Pattern</a>.</li>
</ul>

<h2 id="example-project-setup">Example Project Setup</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/notesbyair/blog.mapstruct.git
</code></pre></div></div>

<p>In this example, we have a Java Bean - <code class="language-plaintext highlighter-rouge">Car</code>, we want to convert it to `CarDTO object where it is has different names for mapping.</p>

<p class="figure"><img src="/assets/blog/2021/11-07-img1.png" alt="Full-width image" /></p>

<h2 id="how-to-map-using-mapstruct-annotation-">How to map using mapstruct annotation ?</h2>

<p>Define a mapper interface for above conversion, it will convert <code class="language-plaintext highlighter-rouge">Car</code> to <code class="language-plaintext highlighter-rouge">CarDto</code>. The mapstruct library generates the implementations for it.</p>

<p class="note" title="Important">In below interface <strong>source</strong>:<code class="language-plaintext highlighter-rouge">Car</code>, <strong>target</strong>: <code class="language-plaintext highlighter-rouge">CarDto</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// file: "CarMapper.java"</span>
<span class="kn">import</span> <span class="nn">org.mapstruct.Mapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mapstruct.Mapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mapstruct.factory.Mappers</span><span class="o">;</span>

<span class="nd">@Mapper</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CarMapper</span> <span class="o">{</span>
    <span class="nc">CarMapper</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="nc">Mappers</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span> <span class="nc">CarMapper</span><span class="o">.</span><span class="na">class</span> <span class="o">);</span>
    <span class="nd">@Mapping</span><span class="o">(</span><span class="n">target</span> <span class="o">=</span> <span class="s">"seats"</span><span class="o">,</span> <span class="n">source</span> <span class="o">=</span> <span class="s">"seatConfiguration"</span><span class="o">)</span>
    <span class="nc">CarDto</span> <span class="nf">convert</span><span class="o">(</span><span class="nc">Car</span> <span class="n">car</span><span class="o">);</span>

    <span class="nd">@Mapping</span><span class="o">(</span><span class="n">source</span> <span class="o">=</span> <span class="s">"numberOfSeats"</span><span class="o">,</span> <span class="n">target</span> <span class="o">=</span> <span class="s">"seatCount"</span><span class="o">)</span>
    <span class="nd">@Mapping</span><span class="o">(</span><span class="n">source</span> <span class="o">=</span> <span class="s">"seatMaterial"</span><span class="o">,</span> <span class="n">target</span> <span class="o">=</span> <span class="s">"material"</span><span class="o">)</span>
    <span class="nc">SeatConfigurationDto</span> <span class="nf">seatConfigurationToSeatConfigurationDto</span><span class="o">(</span><span class="nc">SeatConfiguration</span> <span class="n">seatConfiguration</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p class="figcaption">CarMapper for Converting Car to CarDTO</p>

<h2 id="testing">Testing</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">testMapping</span><span class="o">()</span> <span class="o">{</span>
  <span class="nc">Car</span> <span class="n">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="o">();</span>
  <span class="n">car</span><span class="o">.</span><span class="na">setMake</span><span class="o">(</span><span class="s">"Tesla"</span><span class="o">);</span>
  <span class="n">car</span><span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="nc">CarType</span><span class="o">.</span><span class="na">SPORTS</span><span class="o">);</span>
  <span class="n">car</span><span class="o">.</span><span class="na">setSeatConfiguration</span><span class="o">(</span><span class="k">new</span> <span class="nc">SeatConfiguration</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="nc">SeatMaterial</span><span class="o">.</span><span class="na">LEATHER</span><span class="o">));</span>
  <span class="nc">CarDto</span> <span class="n">carDTO</span> <span class="o">=</span> <span class="nc">CarMapper</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
  <span class="n">assertEquals</span><span class="o">(</span><span class="n">car</span><span class="o">.</span><span class="na">getMake</span><span class="o">(),</span> <span class="n">carDTO</span><span class="o">.</span><span class="na">getMake</span><span class="o">());</span>
  <span class="n">assertEquals</span><span class="o">(</span><span class="n">car</span><span class="o">.</span><span class="na">getType</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">carDTO</span><span class="o">.</span><span class="na">getType</span><span class="o">());</span>
  <span class="n">assertEquals</span><span class="o">(</span><span class="n">car</span><span class="o">.</span><span class="na">getSeatConfiguration</span><span class="o">().</span><span class="na">getSeatMaterial</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span>
      <span class="n">carDTO</span><span class="o">.</span><span class="na">getSeats</span><span class="o">().</span><span class="na">getMaterial</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="how-it-works-">How it works ?</h2>
<ol>
  <li>If Source and Target bean contains same name, then it will convert directly, for example <code class="language-plaintext highlighter-rouge">make</code> is same name in both beans. For all other, you need to define a names using <code class="language-plaintext highlighter-rouge">mapping</code> annotation like shown in above.</li>
  <li>You need to define another mapping, which will convert the <code class="language-plaintext highlighter-rouge">seatConfiguration</code>. For more, refer this section of the blog post
    <ul>
      <li><a href="https://www.baeldung.com/mapstruct#Beans">Mapping Beans with Child Beans  </a></li>
    </ul>
  </li>
</ol>

<h2 id="references">References</h2>

<ol>
  <li><a href="https://www.baeldung.com/mapstruct">Quick Guide to MapStruct</a></li>
  <li><a href="https://mapstruct.org/">https://mapstruct.org/</a></li>
  <li><a href="https://mapstruct.org/documentation/installation/">https://mapstruct.org/documentation/installation/</a></li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>Using <code class="language-plaintext highlighter-rouge">mapstruct</code>, we can easily map Java Beans/POJO using less number of codes. Hope this gives nice introduction, let me know for any doubts here.</p>]]></content><author><name>Ajay Ramesh</name><email>ajaysjournal@icloud.com</email></author><category term="cs" /><summary type="html"><![CDATA[Five min introduction on mapstruct for Java Bean Mapping.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/blog/2021/screenshot.jpg" /><media:content medium="image" url="http://localhost:4000/assets/blog/2021/screenshot.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My fav technologies mind map</title><link href="http://localhost:4000/blog/cs/2021-10-31-my-fav-technologies-mind-map/" rel="alternate" type="text/html" title="My fav technologies mind map" /><published>2021-10-31T00:00:00-04:00</published><updated>2024-11-12T18:49:23-05:00</updated><id>http://localhost:4000/blog/cs/my-fav-technologies-mind-map</id><content type="html" xml:base="http://localhost:4000/blog/cs/2021-10-31-my-fav-technologies-mind-map/"><![CDATA[<p>Today, I wanted to create a Mind map on all technologies, so here I am with this mind map diagram. Feel free to suggest any technology!</p>

<p class="figure"><img src="/assets/blog/10-2021/solutions.png" alt="Full-width image" /></p>

<p>References -</p>
<ol>
  <li>https://stackshare.io/feed</li>
  <li>https://db-engines.com/en/ranking</li>
  <li>Image by <a href="https://pixabay.com/users/akitada31-172067/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=6238107">akitada31</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=6238107">Pixabay</a></li>
</ol>]]></content><author><name>Ajay Ramesh</name><email>ajaysjournal@icloud.com</email></author><category term="cs" /><summary type="html"><![CDATA[Let me list my favorite tecnology stack as a mind map, feel free to suggest any edits.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/blog/10-2021/mindmap.png" /><media:content medium="image" url="http://localhost:4000/assets/blog/10-2021/mindmap.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Try JHipster using Docker</title><link href="http://localhost:4000/blog/cs/2021-07-29-Jhipster-docker/" rel="alternate" type="text/html" title="Try JHipster using Docker" /><published>2021-07-29T00:00:00-04:00</published><updated>2024-11-12T18:49:23-05:00</updated><id>http://localhost:4000/blog/cs/Jhipster-docker</id><content type="html" xml:base="http://localhost:4000/blog/cs/2021-07-29-Jhipster-docker/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#pre-requirements" id="markdown-toc-pre-requirements">Pre-requirements</a></li>
  <li><a href="#step-01-create-docker-file" id="markdown-toc-step-01-create-docker-file">Step 0.1: Create Docker file</a></li>
  <li><a href="#step-02-create-appjdl-file" id="markdown-toc-step-02-create-appjdl-file">Step 0.2: Create app.jdl file</a></li>
  <li><a href="#step-1-build-the-container" id="markdown-toc-step-1-build-the-container">Step 1: Build the Container</a></li>
  <li><a href="#step-2-run-the-jhipster-app" id="markdown-toc-step-2-run-the-jhipster-app">Step 2: Run the Jhipster App</a></li>
  <li><a href="#source-code" id="markdown-toc-source-code">Source Code</a></li>
</ul>

<p><a href="https://www.jhipster.tech/">JHipster</a>  is a development platform to quickly generate, develop, &amp; deploy modern web applications &amp; microservice architectures.
It’s been a year with Jhipster, as a token of appreciation to community, writing this blog for those who wants to try out this platform quickly.</p>

<h2 id="pre-requirements">Pre-requirements</h2>
<ol>
  <li><a href="https://docs.docker.com/engine/install/">Docker</a></li>
</ol>

<h2 id="step-01-create-docker-file">Step 0.1: Create Docker file</h2>

<p>Create a file, name it as <code class="language-plaintext highlighter-rouge">Dockerfile</code>, add below content.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM node:14.16
RUN apt-get update &amp;&amp; apt-get install -y libasound2 libxtst6
RUN wget https://download.bell-sw.com/java/11.0.11+9/bellsoft-jdk11.0.11+9-linux-amd64.deb &amp;&amp; \
    apt install ./bellsoft-jdk11.0.11+9-linux-amd64.deb 

RUN npm install -g generator-jhipster

RUN  [ "java", "-version" ]
RUN jhipster --version

RUN mkdir app
COPY app.jdl /app
RUN cd /app
RUN export NG_CLI_ANALYTICS=ci
WORKDIR  /app
RUN [ "jhipster", "jdl", "app.jdl", "--no-insight"]
</code></pre></div></div>

<h2 id="step-02-create-appjdl-file">Step 0.2: Create app.jdl file</h2>
<p>JDL - JHipster Domain Language to define your app, for more try this <a href="https://start.jhipster.tech/jdl-studio/">jdl-studio</a>
I wanted to keep it simple and short, so here I am creating entity <code class="language-plaintext highlighter-rouge">News</code> to store news.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName NewsFeed
    buildTool maven
    clientFramework angularX
    clientTheme yeti
    clientPackageManager npm
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    enableHibernateCache true
    enableSwaggerCodegen true
    enableTranslation false
    jhiPrefix hg
    packageName com.news.app
    prodDatabaseType postgresql
    reactive false
    searchEngine false
    serverPort 8080
    serviceDiscoveryType no
    skipClient false
    skipServer false
    testFrameworks []
    websocket false
  }
  entities *
}

entity News {
  name String
  icon ImageBlob
  date LocalDate
  content TextBlob
}
</code></pre></div></div>

<h2 id="step-1-build-the-container">Step 1: Build the Container</h2>
<p>First let’s build the container, which installs the JHipster in local, creates the application with <code class="language-plaintext highlighter-rouge">News</code> entity.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build -t jhipsterlab:latest .   
</code></pre></div></div>
<h2 id="step-2-run-the-jhipster-app">Step 2: Run the Jhipster App</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container run --name jhipsterLab -p 9999:8080  -it jhipsterlab:latest  /bin/bash ./mvnw
</code></pre></div></div>
<p>Now your application is running in below port.
<a href="http://localhost:9999">http://localhost:9999</a></p>

<p class="figure"><img src="/assets/blog/10-2021/jhip-helloworld.gif" alt="final" /></p>

<h2 id="source-code">Source Code</h2>

<p>Entire project is avialble here, feel free to clone and play around.
<a href="https://github.com/notesbyair/jhipster-hello-world-app">https://github.com/notesbyair/jhipster-hello-world-app</a></p>]]></content><author><name>Ajay Ramesh</name><email>ajaysjournal@icloud.com</email></author><category term="cs" /><summary type="html"><![CDATA[This blog is written to help you to test `JHipster`, without worrying much about installation of it. It's been a year with Jhipster, as a token of appreciation to community, writing this blog for those who wants to try out this platform quickly.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/blog/jhipster.png" /><media:content medium="image" url="http://localhost:4000/assets/blog/jhipster.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to manage multiple versions of Cuda and cuDNN ?</title><link href="http://localhost:4000/blog/cs/2020-05-26-installing-multiple-versions-of-cuda-cudnn/" rel="alternate" type="text/html" title="How to manage multiple versions of Cuda and cuDNN ?" /><published>2020-05-26T00:00:00-04:00</published><updated>2024-11-12T18:49:23-05:00</updated><id>http://localhost:4000/blog/cs/installing-multiple-versions-of-cuda-cudnn</id><content type="html" xml:base="http://localhost:4000/blog/cs/2020-05-26-installing-multiple-versions-of-cuda-cudnn/"><![CDATA[<ul>
  <li>this unordered seed list will be replaced by toc as unordered list</li>
</ul>

<h2 id="references">References</h2>

<p>First of all, I must thank two blog posts, which made my life easier.</p>

<ul>
  <li>https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77</li>
  <li>https://www.pugetsystems.com/labs/hpc/How-to-install-CUDA-9-2-on-Ubuntu-18-04-1184/</li>
</ul>

<h2 id="get-started">Get Started</h2>

<p>Why we are doing this ?</p>

<ul>
  <li>Suppose you want to run some old projects from GitHub.</li>
  <li>Experiment with new versions of <a href="https://developer.nvidia.com/cuda-toolkit">CUDA</a>, and experiment new features of it.</li>
</ul>

<h2 id="cuda-installation">CUDA installation</h2>

<p>Before starting, we need to download CUDA and follow steps from NVIDIA for right version.</p>

<h4 id="the-most-important-steps-to-follow-during-cuda-installation">The most important steps to follow during CUDA installation.</h4>

<ol>
  <li><em>Do not install CUDA drivers</em> from CUDA-toolkit. Manually install the latest drivers for your graphics card.</li>
  <li><em>Do not create the symbolic link</em> during installation process, since we need multiple versions.</li>
</ol>

<h3 id="automation-script">Automation Script</h3>

<p>The blogs that I mentioned earlier help a lot, and then I added the below script to make my life even more accessible.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">touch ~/.bashrc</code> add below contents to bottom of the file</p>
</blockquote>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># add below to your env bash file.</span>

<span class="k">function </span>_switch_cuda <span class="o">{</span>
   <span class="nv">v</span><span class="o">=</span><span class="nv">$1</span>
   <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/cuda-<span class="nv">$v</span>/bin
   <span class="nb">export </span><span class="nv">CUDADIR</span><span class="o">=</span>/usr/local/cuda-<span class="nv">$v</span>
   <span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/usr/local/cuda-<span class="nv">$v</span>/lib64
   nvcc <span class="nt">--version</span>
<span class="o">}</span>
_switch_cuda 10.1 <span class="c"># change the version of your like to load bash.</span>
</code></pre></div></div>

<h2 id="cudnn-installation-on-all-cuda-versions">cuDNN installation on all CUDA versions.</h2>

<p>Finally, Installing cuDNN is just like copying the source header files into the respective CUDA toolkit path.
Download and extract the cuDNN tar file, then run below script to copy lib into right CUDA Dirs.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>After extraction of cudnn zip, create cudnn_install.sh file and place it like below.
ajayramesh @ ubox-r9-1804 ~/tmp/cudnn-10.2-linux-x64-v7.6.5.32
└─ <span class="nv">$ </span>▶ tree <span class="nt">-L</span> 2
<span class="nb">.</span>
├── cuda
│   ├── include
│   ├── lib64
│   └── NVIDIA_SLA_cuDNN_Support.txt
└── cudnn_install.sh

3 directories, 2 files
</code></pre></div></div>

<h3 id="script-to-move-cudnn-to-right-folders">Script to move cuDNN to right folders</h3>

<p>Add below content to new <code class="language-plaintext highlighter-rouge">cudnn_install.sh</code> and run this command <code class="language-plaintext highlighter-rouge">chmod +x cudnn_install.sh &amp; sudo ./cudnn_install.sh</code> on extracted cuDNN zip folder</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">read</span> <span class="nt">-p</span> <span class="s2">"CUDA-version: "</span> ver
<span class="nb">cp </span>cuda/include/cudnn.h /usr/local/cuda-<span class="s2">"</span><span class="k">${</span><span class="nv">ver</span><span class="k">}</span><span class="s2">"</span>/include
<span class="nb">cp </span>cuda/lib64/libcudnn<span class="k">*</span> /usr/local/cuda-<span class="s2">"</span><span class="k">${</span><span class="nv">ver</span><span class="k">}</span><span class="s2">"</span>/lib64
<span class="nb">chmod </span>a+r /usr/local/cuda<span class="k">*</span>/include/cudnn.h /usr/local/cuda<span class="k">*</span>/lib64/libcudnn<span class="k">*</span>
</code></pre></div></div>

<h2 id="final-results">Final Results</h2>

<p>My current system now got CUDA 9.0 to 10.2 versions.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ajayramesh @ ubox-r9-1804 /usr/local
└─ <span class="nv">$ </span>▶ tree <span class="nt">-L</span> 1
<span class="nb">.</span>
├── bin
├── cuda-10.0
├── cuda-10.1
├── cuda-10.2
├── cuda-9.0
├── cuda-9.1
├── cuda-9.2
├── etc
├── games
├── include
├── lib
├── man -&gt; share/man
├── sbin
├── share
├── src
└── texlive

16 directories, 0 files
</code></pre></div></div>]]></content><author><name>Ajay Ramesh</name><email>ajaysjournal@icloud.com</email></author><category term="cs" /><summary type="html"><![CDATA[I am writing this blog to give some insights on managing multiple versions of Cuda and some links.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/blog/nvidia.jpg" /><media:content medium="image" url="http://localhost:4000/assets/blog/nvidia.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Solid Design Principle Revisit</title><link href="http://localhost:4000/blog/cs/2020-05-23-solid-design-principle-revisit/" rel="alternate" type="text/html" title="Solid Design Principle Revisit" /><published>2020-05-23T00:00:00-04:00</published><updated>2024-11-12T18:49:23-05:00</updated><id>http://localhost:4000/blog/cs/solid-design-principle-revisit</id><content type="html" xml:base="http://localhost:4000/blog/cs/2020-05-23-solid-design-principle-revisit/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#single-responsibility-principle" id="markdown-toc-single-responsibility-principle">Single-Responsibility Principle</a></li>
  <li><a href="#open-closed-principle" id="markdown-toc-open-closed-principle">Open-closed Principle</a></li>
  <li><a href="#liskov-substitution-principle" id="markdown-toc-liskov-substitution-principle">Liskov substitution principle</a></li>
  <li><a href="#interface-segrgation-principle" id="markdown-toc-interface-segrgation-principle">Interface Segrgation Principle</a></li>
  <li><a href="#dependency-inversion-principle" id="markdown-toc-dependency-inversion-principle">Dependency Inversion Principle</a></li>
  <li><a href="#references" id="markdown-toc-references">References</a></li>
</ul>

<p>Five principles of <a href="https://en.wikipedia.org/wiki/SOLID">S.O.L.I.D by Robert C. Martin</a> is core and fundamental to any Agile Development or Adaptive software development. Let’s get started.</p>

<h2 id="single-responsibility-principle">Single-Responsibility Principle</h2>

<blockquote>
  <p>Keep it simple, only one object is responsible for a feature in your entire application.</p>
</blockquote>

<p><strong>Try this</strong>: Can you think of objects where it is similar to a Notepad and methods(like saving in pdf/json/etc)?
There are several ways we can design it, I have added some best practices below, let me know your thoughts.</p>

<blockquote>
  <p>Best practice</p>
</blockquote>

<p>The below code snippet is having two classes, one to hold Notepad content and another generate Report in PDF.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Doc</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>
   <span class="c1">// ...</span>
    <span class="nc">Doc</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
    <span class="o">}</span>
   <span class="c1">// ...</span>
<span class="o">}</span>

<span class="c1">// Report in seperate class</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Report</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="no">PDF</span> <span class="n">output</span><span class="o">;</span>
    <span class="o">...</span>
    <span class="nc">Report</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">pdf</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>Not recommended way</p>
</blockquote>

<p class="faded">Below Doc class is having content and report generation code, so the Doc has two responsibilities, one is handling content and another is generating the report.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Doc</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">reportJson</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">reportPdf</span><span class="o">;</span>

    <span class="nc">Doc</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">reportJson</span> <span class="o">=</span> <span class="n">json</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">reportPdf</span> <span class="o">=</span> <span class="n">pdf</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">json</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">pdf</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Why the above single class is not recommended?</p>

<ul>
  <li>Since generating a report in a different format will change from time to time, keeping it in Doc class would not be a good idea(changing existing source code involves in lots of testing — so maintenance cost increases), instead, keep Doc class just for storing the content of the Doc.</li>
</ul>

<p><strong>Notes</strong></p>

<ul>
  <li>Repeat:  Keep it simple, if it is complex to your intuition, then definitely it will be more complex to other developers.</li>
  <li>Caution: The above example is just to illustrate the Principle of Single Responsibility. Not to show how to design actual notepad.</li>
</ul>

<h2 id="open-closed-principle">Open-closed Principle</h2>
<blockquote>
  <p>“Software entities (classes, modules, functions, etc.** should be open for extension, but closed for modification.”</p>
</blockquote>

<p><strong>Try this:</strong> Imagine you are building an MS Office word 2020. The above code is very old version, has just two types of export options(pdf, json), but new MSWord2020 has some new features: — such as text to speech. Also, you will be adding new features after few years. How will do you design ?</p>

<p>There are several ways we can design it, I have added some <strong>Do’s/Don’t</strong> below, check across your solution.</p>

<blockquote>
  <p>Best practice</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">doc</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">display</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">);</span> <span class="o">}</span>

<span class="kd">interface</span> <span class="nc">doc_feature1</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">feature1</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">);</span> <span class="o">}</span>

<span class="kd">class</span> <span class="nc">MSWord2020</span> <span class="kd">implements</span> <span class="n">doc</span><span class="o">,</span> <span class="n">doc_feature1</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">display</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>  <span class="o">...</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">feature1</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>  <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>Add new feature in 2030</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">doc_feature2</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">feature2</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">);</span> <span class="o">}</span>

<span class="kd">class</span> <span class="nc">MSWord2030</span> <span class="kd">extends</span> <span class="nc">MSWord2020</span> <span class="kd">implements</span> <span class="n">doc_feature2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">feature2</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">)</span>  <span class="o">{</span>  <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>Not recommended way</p>
</blockquote>

<p>Alternatively, you can modify the original class to add new feature 2, like below — Below code does not obey Rule 1, i.e, single responsibility principle</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MSWord2030</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">display</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">feature1</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">feature2</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">feature3</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Notes</strong></p>
<ul>
  <li>Its always better to program your code in Interfaces and apply inheritance where possible.</li>
</ul>

<h2 id="liskov-substitution-principle">Liskov substitution principle</h2>

<p>This is the most important and tricky rule to understand, I read several blogs and guides. Try to read this one at least twice.</p>

<p><strong>Quick Test:</strong> Are you overriding a method or implementing an interface? If Yes, you must test this rule thoroughly.</p>

<p class="figure"><code class="language-plaintext highlighter-rouge">S</code> is Child or Extends <code class="language-plaintext highlighter-rouge">B</code>, Can you make B = S in your code?
<img src="/assets/blog/1.png" alt="Full-width image" /></p>

<p class="figure">Can you succeed by Human = HumanoidRobot? Of course not!
<img src="/assets/blog/2.png" alt="Full-width image" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Human</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HumanoidRobot</span> <span class="kd">extends</span> <span class="nc">Human</span> <span class="o">{</span>
     <span class="c1">// can robot eat ?</span>
<span class="o">}</span>

<span class="nc">Human</span> <span class="n">obj1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Human</span><span class="o">()</span>
<span class="nc">Human</span> <span class="n">obj2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HumanoidRobot</span><span class="o">()</span>
</code></pre></div></div>

<p class="message">Repeat: If a class, S, is a subtype of a class, B, then S can be used to replace all instances of B without changing the behaviors of a program. The logic behind this is straightforward. If S is a subtype of B, then it can be expected that S will have the same behaviors as B. Therefore, S can be used in place of B and it would not affect the software. This means that inheritance can be tested by applying substitution.</p>

<p class="figure"><img src="/assets/blog/3.png" alt="Full-width image" /></p>

<p><strong>Notes</strong>
Below notes are from the design pattern course in Coursera, feel free to check out.</p>
<ul>
  <li>The base class is the more generalized class, and therefore, its attributes and behaviors should reflect it. The names given to the attributes and methods, as well as the implementation of each method must be broad enough that all subclasses can use them.</li>
  <li>If inheritance is not used correctly, it can lead to a violation of the “Liskov Substitution Principle”. This principle uses substitution to determine whether or not inheritance has been properly used.</li>
  <li>These rules are not programmatically enforced by any object-oriented language. In fact, overriding a base class’s behaviors can have advantages. Subclasses can improve the performance of behaviors of its base class, without changing the expected results of said behavior.</li>
</ul>

<p>subclass uses different sorting algo, but same behavior.</p>

<p class="figure**">Another example: let’s take a look at a class that is an abstraction of a department store. The base class may implement a naive searching algorithm that, in the worst case, iterates through the entire list of the items that the store sells. A subclass could override this method and provide a better search algorithm. Although the approach that the subclass takes to searching is different, the expected behavior and outcome are the same.
<img src="/assets/blog/4.png" alt="Full-width image" /></p>

<h2 id="interface-segrgation-principle">Interface Segrgation Principle</h2>
<p>Suppose you have an interface for a Robot, operations include run, fight, walk, swim, shoot. Now another company wants to use your code base for Robot and extend to make a Robot which can Speak. But here is the problem, the company doesn’t want to implement swim, fight and shoot operations. So company writes something like below -</p>

<blockquote>
  <p>Not recommended way</p>
</blockquote>

<p>The below code violates Principle 3. Never ever changes the behavior and force the client to implement the behavior. Shoot, Swim, and Fight are irrelevant to New Client.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Human</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HumanoidRobot</span> <span class="kd">extends</span> <span class="nc">Human</span> <span class="o">{</span>
    <span class="c1">// Humanoid Robot  - A humanoid is something that has an appearance</span>
    <span class="c1">// resembling a human without actually being one.</span>
    <span class="c1">// can robot eat ? No</span>
    <span class="nd">@override</span>
    <span class="n">publi</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// do nothing</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>What is the problem?</p>
</blockquote>

<p>You are making client or company implement the operations forcefully. So in order avoid this we need to have interface segregation principle. It’s quite simple, that no class should be forced to depend on methods it does not use.</p>

<blockquote>
  <p>Best practice</p>
</blockquote>

<p>Solution to the Don’t part, now read below snippet and compare with above.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Everything</span> <span class="o">{</span> <span class="n">run</span><span class="o">()</span> <span class="o">}</span>
<span class="c1">// similar to Object class(root class, it has most generalized methods) in Java</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HumanoidRobot</span> <span class="kd">extends</span> <span class="nc">Everything</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// code to run using batteries.</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Human</span> <span class="kd">extends</span> <span class="nc">Everything</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// code to run using physical streangth.</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Example:</span>
    <span class="nc">Everything</span> <span class="n">ev</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HumanoidRobot</span><span class="o">()</span>
    <span class="nc">Everything</span> <span class="n">ev</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Human</span><span class="o">()</span>
<span class="c1">// if you apply the substition rule it satisfies, since both does the run operation but differently.</span>
</code></pre></div></div>

<h2 id="dependency-inversion-principle">Dependency Inversion Principle</h2>

<p>From wikipedia:</p>
<blockquote>
  <p>High-level modules should not depend on low-level modules. Both should depend on abstractions.
Abstractions should not depend on details. Details should depend on abstractions</p>
</blockquote>

<p>Quite easy to understand using examples
First, Take a look at Java Object Class: Root class to all objects. For example, Take Number, String, Double etc Objects in java extends Object class.
All above principles apply to this one. Here suppose you have Robot interface, then all objects of Robot should be referring to an abstraction rather than the concrete implementation. Referring to the above code(Principle-4: Interface Segregation):</p>

<blockquote>
  <p>Best practice</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Robot</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SpeakingRobot</span><span class="o">()</span>
</code></pre></div></div>

<blockquote>
  <p>Implementation of SpeakingRobot Class</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Robot</span> <span class="o">{</span>
     <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
     <span class="kt">void</span> <span class="nf">shoot</span><span class="o">();</span>
     <span class="kt">void</span> <span class="nf">swim</span><span class="o">();</span>
     <span class="kt">void</span> <span class="nf">fight</span><span class="o">();</span>
     <span class="kt">void</span> <span class="nf">walk</span><span class="o">();</span>
 <span class="o">}</span>

<span class="c1">// company A wants to extend the Robot to add Speaking feature</span>


<span class="kd">public</span> <span class="nc">SpeakingRobot</span> <span class="kd">extends</span> <span class="nc">Robot</span> <span class="o">{</span>
     <span class="nd">@Overrides</span>
     <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
         <span class="c1">// .. inherits from Robot</span>
     <span class="o">}</span>

     <span class="nd">@Overrides</span>
     <span class="kt">void</span> <span class="nf">shoot</span><span class="o">()</span> <span class="o">{</span>
         <span class="c1">// do nothing</span>
         <span class="c1">// return;</span>
     <span class="o">}</span>

     <span class="nd">@Overrides</span>
     <span class="kt">void</span> <span class="nf">swim</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// do nothing</span>
         <span class="c1">// return;</span>
     <span class="o">}</span>

     <span class="nd">@Overrides</span>
     <span class="kt">void</span> <span class="nf">fight</span><span class="o">(){</span>
          <span class="c1">// do nothing</span>
         <span class="c1">// return;</span>
     <span class="o">}</span>

     <span class="nd">@Overrides</span>
     <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
         <span class="c1">// .. inherits from Robot</span>
     <span class="o">}</span>

     <span class="nd">@Overrides</span>
     <span class="kt">void</span> <span class="nf">speak</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// code to speak</span>
     <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>Not recommended way</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SpeakingRobot</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SpeakingRobot</span><span class="o">()</span> <span class="c1">// DONT Declare like this :)</span>
</code></pre></div></div>
<blockquote>
  <p>SpeakingRobot class is an actual implementation(low-level class), so any object which might change in future should depend on abstractions(Robot interface is high-level abstraction here).</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Robot</span> <span class="o">{</span>
    <span class="c1">// very common features, every client must implement are below.</span>
    <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">walk</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">ShootingRobot</span> <span class="kd">extends</span> <span class="nc">Robot</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">shoot</span><span class="o">();</span> <span class="o">}</span>
<span class="kd">interface</span> <span class="nc">SwimmingRobot</span> <span class="kd">extends</span> <span class="nc">Robot</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">swim</span><span class="o">();</span> <span class="o">}</span>
<span class="kd">interface</span> <span class="nc">FightingRobot</span> <span class="kd">extends</span> <span class="nc">Robot</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">fight</span><span class="o">();</span> <span class="o">}</span>

<span class="kd">class</span>  <span class="nc">SpeakingRobot</span>  <span class="kd">implements</span>  <span class="nc">Robot</span><span class="o">{</span>


    <span class="kt">void</span> <span class="nf">speak</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// code to speak</span>
    <span class="o">}</span>


    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// code to run</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// code to walk</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="references">References</h2>
<ul>
  <li><a href="https://www.coursera.org/learn/design-patterns" title="Coursera Design Pattern">Coursera - Design Patterns </a></li>
  <li><a href="https://dzone.com/articles/the-liskov-substitution-principle-with-examples">Liskov Substitution Principle from Dzone</a></li>
  <li><a href="https://hackernoon.com/liskov-substitution-principle-a982551d584a">Liskov Substitution Principle from Hackernoon</a></li>
  <li><a href="https://stackoverflow.com/questions/56860/what-is-an-example-of-the-liskov-substitution-principle">Liskov Substitution Principle from Stackoverflow</a></li>
  <li><a href="http://web.archive.org/web/20151128004108/http://www.objectmentor.com/resources/articles/lsp.pdf">Liskov Substitution Principle from Actual Paper</a></li>
</ul>]]></content><author><name>Ajay Ramesh</name><email>ajaysjournal@icloud.com</email></author><category term="cs" /><summary type="html"><![CDATA[This post is dedicated to those who are trying to learn the [SOLID design](https://en.wikipedia.org/wiki/SOLID) principle. Some of my quick cases will give you easy ideas, and follow the reference links to understand more. Five principles of [S.O.L.I.D by Robert C. Martin](https://en.wikipedia.org/wiki/SOLID) is core and fundamental to any Agile Development or Adaptive software development. Let’s get started.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/blog/solid.jpg" /><media:content medium="image" url="http://localhost:4000/assets/blog/solid.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>